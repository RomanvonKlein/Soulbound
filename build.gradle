import com.modrinth.minotaur.TaskModrinthUpload
import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '0.11.+'
    id "maven-publish"
    id "com.modrinth.minotaur" version "1.1.0"
}

def ENV = System.getenv()
def buildTime = ENV.BUILD_TIME ?: new Date().format('yyyyMMddHHmmss')

group = "dev.upcraft"
archivesBaseName = "Soulbound"

boolean isPreviewBuild = !ENV.TAG || ENV.TAG.matches(".+-.+")
def buildNumber = !ENV.TAG ? ("${ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}" : buildTime}-${project.minecraft_version}") : ""
version = (ENV.TAG ?: "development") + ((isPreviewBuild && !ENV.TAG) ? "+${buildNumber}" : "")

loom {

}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases"
	}
	maven {
		name = "Ladysnake Libs"
		url = "https://ladysnake.jfrog.io/artifactory/mods"
	}
    maven {
        url = "https://maven.shedaniel.me"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    compileOnly "org.jetbrains:annotations:23.0.0"
    modApi "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation(include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}")) {
        exclude group: 'net.fabricmc.fabric-api'
    }
}

task apiJar(type: Jar, dependsOn: classes) {
    from(sourceSets.main.output) {
        include String.valueOf(findProperty("api_package")).replace('.', '/') + "/**"
    }
    from("LICENSE.md") {
        rename { "LICENSE_${archiveBaseName.get()}" }
    }
    includeEmptyDirs false
    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName + "-API",
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:api".toLowerCase(Locale.ROOT),
            "Built-On-Minecraft": project.minecraft_version,
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
    archiveClassifier.set("api-dev")
}

task remapApiJar(type: RemapJarTask, dependsOn: apiJar) {
    input.set(apiJar.archiveFile.get())
    addNestedDependencies.set(false)
    archiveClassifier.set("api")
}
tasks.assemble.dependsOn(remapApiJar)

jar {
    from("LICENSE.md") {
        rename { "LICENSE_${archiveBaseName.get()}" }
    }

    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName,
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}".toLowerCase(Locale.ROOT),
            "Built-On-Minecraft": project.minecraft_version,
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
}

processResources {
    // this will ensure that this task is redone when there's a change
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        // add mod metadata
        expand "version": project.version
    }
}

artifacts {
    archives(remapJar)
    archives(remapApiJar)
    archives(sourcesJar) {
        builtBy remapSourcesJar
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact remapJar
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact(remapApiJar)
        }
    }

    repositories {
        if (ENV.MAVEN_UPLOAD_URL) {
            maven {
                url = ENV.MAVEN_UPLOAD_URL
                credentials {
                    username = ENV.MAVEN_UPLOAD_USER
                    password = ENV.MAVEN_UPLOAD_PASSWORD
                }
            }
        }
    }
}

task publishToModrinth(type: TaskModrinthUpload, dependsOn: assemble) {
    if (ENV.MODRINTH_TOKEN) {
        token = ENV.MODRINTH_TOKEN
    }
    projectId = project.modrinth_id
    uploadFile = remapJar
    versionNumber = ENV.TAG ?: version
    versionName = versionNumber // need this here because the Modrinth API doesn't do that by default
    releaseType = isPreviewBuild ? ((ENV.TAG && ENV.TAG.contains("-beta")) ? "beta" : "alpha") : "release"
    "${project.modrinth_game_versions}".split(",").each {
        addGameVersion(it)
    }
    addLoader("fabric")
}

if (ENV.MODRINTH_TOKEN) {
    tasks.publish.dependsOn(publishToModrinth)
}
